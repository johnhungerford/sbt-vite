package sbtvite.sbtplugin

import org.scalajs.jsenv.Input
import org.scalajs.sbtplugin.ScalaJSPlugin
import org.scalajs.sbtplugin.ScalaJSPlugin.autoImport.*
import sbt._
import sbt.Keys._
import sbt.nio.Keys._
import sbtvite.ViteConfigGen

import java.nio.file.{InvalidPathException, Path}
import scala.util.Try

object SbtVitePlugin extends AutoPlugin {

  // The user should have to enable to plugin explicitly
//  override def trigger = allRequirements
  override def requires = ScalaJSPlugin

  object autoImport {
    lazy val testBundleDirectory = settingKey[Path]("Path of test bundle generated by vite")
    lazy val testViteConfigPath = settingKey[Path]("Path of vite configuration used to bundle tests")
    lazy val viteConfigSources = settingKey[Seq[Path]]("Paths of vite configuration files for overriding default vite test configuration")

    lazy val generateViteConfig = taskKey[Unit]("Generate vite configuration for bundling " +
	  "test JS sources into executable test script")
    lazy val bundleJS = taskKey[Unit]("Run vite on test JS sources to generate an executable " +
	  "test script")
  }

  import autoImport.*

  override lazy val projectSettings = Seq(
    Test / jsEnvInput := List(Input.Script((Test / testBundleDirectory).value / "main.js")),
    Test / testBundleDirectory := {
      val targetDir = target.value.toPath.toAbsolutePath
      val scalaSegment = "scala-" + scalaVersion.value
      targetDir / scalaSegment / s"${name.value}-test-bundle"
    },
    Test / testViteConfigPath := target.value.toPath / "vite-configs" / s"vite.config-test-${name
	  .value}.js",
    Test / viteConfigSources := Seq.empty,
    Test / generateViteConfig / fileInputs += {
      (Test / fastLinkJS / scalaJSLinkerOutputDirectory).value.toPath.toString + "/*.js"
    },
    Test / generateViteConfig := {
       // Only generate a new test config if something has changed
       if ((Test / generateViteConfig).inputFileChanges.hasChanges) {
          val rootDirPath = file(".").toPath.toAbsolutePath
          val linkOutputDir = (Test / fastLinkJS / scalaJSLinkerOutputDirectory).value.toPath
																				.toAbsolutePath
           val inputPath = rootDirPath.relativize(linkOutputDir) / "main.js"
           val outDirPath = (Test / testBundleDirectory).value

          val configString =
              ViteConfigGen.generate(
                  (Test / viteConfigSources).value.toList.map(_.toString),
                  rootDirPath.toString,
                  inputPath.toString,
                  outDirPath.toString,
              ).fold(err => throw new IllegalArgumentException(err.message), identity)

          val configPath = (Test / testViteConfigPath).value
          IO.write(configPath.toFile, configString)
       } else {}
    },
    Test / generateViteConfig := ((Test / generateViteConfig) dependsOn (Test / fastLinkJS)).value,
    Test / bundleJS / fileInputs ++= Seq(
      (Test / testViteConfigPath).value.toString,
      (Test / fastLinkJS / scalaJSLinkerOutputDirectory).value.toPath.toString + "/*.js",
    ),
    Test / bundleJS := {
       // Only bundle if there is a new configuration, there are new test compilation outputs
       // or the bundled output is missing
       if ( {
           (Test / bundleJS).inputFileChanges.hasChanges
       } || {
           Try(IO.read(((Test / testBundleDirectory).value / "main.js").toFile)).isFailure
       }) {
         val configPath = (Test / testViteConfigPath).value.toString
          import scala.sys.process.*
          val command = s"vite build -c $configPath --mode=development"
          val builder = Process(command, Some(file(".")), "NODE_ENV" -> "development")
          println("\n" + command + "\n")
          val exitValue = builder.run().exitValue()
          if (exitValue != 0)
             throw new MessageOnlyException("Vite failed to build test bundle")
       } else {}
    },
    Test / bundleJS := ((Test / bundleJS) dependsOn (Test / generateViteConfig)).value,
    // Make sure test scripts are bundled before running
    Test / test := ((Test / test) dependsOn (Test / bundleJS)).value,

  )

  override lazy val buildSettings = Seq()

  override lazy val globalSettings = Seq()
}
